{"ast":null,"code":"var _jsxFileName = \"/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/ProcessSim/ProcessSim.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./processsim_style.css\";\nimport Tree from './Tree';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProcessSim({\n  back_button\n}) {\n  _s();\n  let [nodes, set_nodes] = useState([]);\n  let [edges, set_edges] = useState([]);\n  let node1 = {\n    id: 1,\n    label: \"New\",\n    color: \"blue\"\n  };\n  let node2 = {\n    id: 2,\n    label: \"Ready\",\n    color: \"blue\"\n  };\n  let node3 = {\n    id: 3,\n    label: \"Runing\",\n    color: \"blue\"\n  };\n  let edge1 = {\n    from: 1,\n    to: 2,\n    arrows: \"to\"\n  };\n  let edge2 = {\n    from: 2,\n    to: 3,\n    arrows: \"to\",\n    color: \"\"\n  };\n  let edge3 = {\n    from: 3,\n    to: 2,\n    arrows: \"to\",\n    color: \"\"\n  };\n  let [trgt_pid, set_trgt_pid] = useState(0);\n  let last_node = node1;\n  let new_action = () => {\n    let algo = fetch(\"http://localhost:1200/new_process\");\n    algo.then(res => {\n      res.json().then(obj => {\n        set_trgt_pid(obj.Pid);\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":1}`\n        });\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":2}`\n        });\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":3}`\n        });\n        node3.color = \"red\";\n        set_nodes([node1, node2, node3]);\n        edge2.color = 'red';\n        set_edges([edge1, edge2]);\n        last_node = node3;\n      });\n    });\n  };\n  let stop_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":2}`\n    });\n    // 3->2\n    edge2.color = \"red\";\n    edge3.color = '';\n    set_edges([edge1, edge2]);\n    node2.color = \"red\";\n    node3.color = \"blue\";\n    set_nodes([node1, node2, node3]);\n    last_node = node2;\n  };\n  let resume_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":3}`\n    });\n    // 2->3\n    edge2.color = \"\";\n    edge3.color = 'red';\n    set_edges([edge1, edge2]);\n    node2.color = \"blue\";\n    node3.color = \"red\";\n    set_nodes([node1, node2, node3]);\n    last_node = node3;\n  };\n  let kill_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":4}`\n    });\n    let last_node = {\n      id: 4,\n      label: \"Terminated\",\n      color: 'red'\n    };\n    edge3.color = \"\";\n    edge2.color = \"\";\n    last_node.color = \"blue\";\n    set_nodes([node1, node2, node3, last_node]);\n    set_edges([edge1, edge2, edge3, {\n      from: last_node.id,\n      to: 4,\n      color: \"red\",\n      arrows: \"to\"\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"processsim-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: back_button,\n      id: \"back\",\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"process-pid-on\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Proceess pid: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"trgt-pid\",\n        children: trgt_pid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"buttons-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: new_action,\n        children: \"New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: stop_action,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: resume_action,\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: kill_action,\n        children: \"Kill\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Tree, {\n      edges: edges,\n      nodes: nodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 12\n  }, this);\n}\n_s(ProcessSim, \"d9t9EgWOSumNB+3qUmA2Wg/L/2k=\");\n_c = ProcessSim;\nexport default ProcessSim;\nvar _c;\n$RefreshReg$(_c, \"ProcessSim\");","map":{"version":3,"names":["React","useState","Tree","jsxDEV","_jsxDEV","ProcessSim","back_button","_s","nodes","set_nodes","edges","set_edges","node1","id","label","color","node2","node3","edge1","from","to","arrows","edge2","edge3","trgt_pid","set_trgt_pid","last_node","new_action","algo","fetch","then","res","json","obj","Pid","method","body","stop_action","resume_action","kill_action","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/ProcessSim/ProcessSim.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport \"./processsim_style.css\"\nimport Tree from './Tree';\nimport { Network } from \"vis-network\";\n\ninterface Params{\n    back_button:()=>void\n}\n\nfunction ProcessSim({back_button}:Params){\n    let [nodes,set_nodes] = useState([] as any[])\n    let [edges,set_edges] = useState([] as any[])\n\n    let node1 = { id: 1, label: \"New\" ,color:\"blue\"}\n    let node2 = { id: 2, label: \"Ready\" ,color:\"blue\"}\n    let node3 = { id: 3, label: \"Runing\", color:\"blue\"}\n    let edge1 = { from: 1, to: 2 ,arrows:\"to\"}\n    let edge2 = { from: 2, to: 3 ,arrows:\"to\", color:\"\"}\n    let edge3 = { from: 3, to: 2 ,arrows:\"to\",color:\"\"}\n    let [trgt_pid,set_trgt_pid] = useState(0)\n    let last_node = node1\n    let new_action = ()=>{\n        let algo = fetch(\"http://localhost:1200/new_process\")\n        algo.then((res)=>{\n            res.json().then((obj)=>{\n                set_trgt_pid(obj.Pid)\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":1}`})\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":2}`})\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":3}`})\n                node3.color = \"red\"\n                set_nodes([node1,node2,node3])\n                edge2.color = 'red'\n                set_edges([edge1,edge2])\n                last_node = node3\n            })\n        })\n    }\n    let stop_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":2}`})\n        // 3->2\n        edge2.color = \"red\"\n        edge3.color = ''\n        set_edges([edge1,edge2])\n        node2.color = \"red\"\n        node3.color = \"blue\"\n        set_nodes([node1,node2,node3])\n        last_node = node2\n    }\n    let resume_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":3}`})\n        // 2->3\n        edge2.color = \"\"\n        edge3.color = 'red'\n        set_edges([edge1,edge2])\n        node2.color = \"blue\"\n        node3.color = \"red\"\n        set_nodes([node1,node2,node3])\n        last_node = node3\n    }\n    let kill_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":4}`})\n        let last_node = { id: 4, label: \"Terminated\", color:'red'}\n        edge3.color = \"\"\n        edge2.color = \"\"\n        last_node.color = \"blue\"\n        set_nodes([node1,node2,node3,last_node])\n        set_edges([edge1,edge2,edge3,{from:last_node.id, to:4, color:\"red\",arrows:\"to\"}])\n    }\n    \n\n    return <div className='processsim-page'>\n        <button onClick={back_button} id='back'>Back</button>\n        <div id='process-pid-on'>\n            <p>Proceess pid: </p>\n            <p id='trgt-pid'>{trgt_pid}</p>\n        </div>\n        <div id='buttons-box'>\n            <button className='sim-buttons' onClick={new_action}>New</button>\n            <button className='sim-buttons' onClick={stop_action}>Stop</button>\n            <button className='sim-buttons' onClick={resume_action}>Resume</button>\n            <button className='sim-buttons' onClick={kill_action}>Kill</button>\n        </div>\n        <Tree edges={edges} nodes={nodes}></Tree>\n\n    </div>\n}\n\nexport default ProcessSim;"],"mappings":";;AAAA,OAAOA,KAAK,IAAuBC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,wBAAwB;AAC/B,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO1B,SAASC,UAAUA,CAAC;EAACC;AAAkB,CAAC,EAAC;EAAAC,EAAA;EACrC,IAAI,CAACC,KAAK,EAACC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAW,CAAC;EAC7C,IAAI,CAACS,KAAK,EAACC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAW,CAAC;EAE7C,IAAIW,KAAK,GAAG;IAAEC,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAC;EAAM,CAAC;EAChD,IAAIC,KAAK,GAAG;IAAEH,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,OAAO;IAAEC,KAAK,EAAC;EAAM,CAAC;EAClD,IAAIE,KAAK,GAAG;IAAEJ,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,QAAQ;IAAEC,KAAK,EAAC;EAAM,CAAC;EACnD,IAAIG,KAAK,GAAG;IAAEC,IAAI,EAAE,CAAC;IAAEC,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAC;EAAI,CAAC;EAC1C,IAAIC,KAAK,GAAG;IAAEH,IAAI,EAAE,CAAC;IAAEC,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAC,IAAI;IAAEN,KAAK,EAAC;EAAE,CAAC;EACpD,IAAIQ,KAAK,GAAG;IAAEJ,IAAI,EAAE,CAAC;IAAEC,EAAE,EAAE,CAAC;IAAEC,MAAM,EAAC,IAAI;IAACN,KAAK,EAAC;EAAE,CAAC;EACnD,IAAI,CAACS,QAAQ,EAACC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;EACzC,IAAIyB,SAAS,GAAGd,KAAK;EACrB,IAAIe,UAAU,GAAGA,CAAA,KAAI;IACjB,IAAIC,IAAI,GAAGC,KAAK,CAAC,mCAAmC,CAAC;IACrDD,IAAI,CAACE,IAAI,CAAEC,GAAG,IAAG;MACbA,GAAG,CAACC,IAAI,CAAC,CAAC,CAACF,IAAI,CAAEG,GAAG,IAAG;QACnBR,YAAY,CAACQ,GAAG,CAACC,GAAG,CAAC;QACrBL,KAAK,CAAC,uCAAuC,EAAC;UAAEM,MAAM,EAAC,MAAM;UAAEC,IAAI,EAAE,UAASH,GAAG,CAACC,GAAI;QAAgB,CAAC,CAAC;QACxGL,KAAK,CAAC,uCAAuC,EAAC;UAAEM,MAAM,EAAC,MAAM;UAAEC,IAAI,EAAE,UAASH,GAAG,CAACC,GAAI;QAAgB,CAAC,CAAC;QACxGL,KAAK,CAAC,uCAAuC,EAAC;UAAEM,MAAM,EAAC,MAAM;UAAEC,IAAI,EAAE,UAASH,GAAG,CAACC,GAAI;QAAgB,CAAC,CAAC;QACxGjB,KAAK,CAACF,KAAK,GAAG,KAAK;QACnBN,SAAS,CAAC,CAACG,KAAK,EAACI,KAAK,EAACC,KAAK,CAAC,CAAC;QAC9BK,KAAK,CAACP,KAAK,GAAG,KAAK;QACnBJ,SAAS,CAAC,CAACO,KAAK,EAACI,KAAK,CAAC,CAAC;QACxBI,SAAS,GAAGT,KAAK;MACrB,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD,IAAIoB,WAAW,GAAGA,CAAA,KAAI;IAClBR,KAAK,CAAC,uCAAuC,EAAC;MAAEM,MAAM,EAAC,MAAM;MAAEC,IAAI,EAAE,UAASZ,QAAS;IAAgB,CAAC,CAAC;IACzG;IACAF,KAAK,CAACP,KAAK,GAAG,KAAK;IACnBQ,KAAK,CAACR,KAAK,GAAG,EAAE;IAChBJ,SAAS,CAAC,CAACO,KAAK,EAACI,KAAK,CAAC,CAAC;IACxBN,KAAK,CAACD,KAAK,GAAG,KAAK;IACnBE,KAAK,CAACF,KAAK,GAAG,MAAM;IACpBN,SAAS,CAAC,CAACG,KAAK,EAACI,KAAK,EAACC,KAAK,CAAC,CAAC;IAC9BS,SAAS,GAAGV,KAAK;EACrB,CAAC;EACD,IAAIsB,aAAa,GAAGA,CAAA,KAAI;IACpBT,KAAK,CAAC,uCAAuC,EAAC;MAAEM,MAAM,EAAC,MAAM;MAAEC,IAAI,EAAE,UAASZ,QAAS;IAAgB,CAAC,CAAC;IACzG;IACAF,KAAK,CAACP,KAAK,GAAG,EAAE;IAChBQ,KAAK,CAACR,KAAK,GAAG,KAAK;IACnBJ,SAAS,CAAC,CAACO,KAAK,EAACI,KAAK,CAAC,CAAC;IACxBN,KAAK,CAACD,KAAK,GAAG,MAAM;IACpBE,KAAK,CAACF,KAAK,GAAG,KAAK;IACnBN,SAAS,CAAC,CAACG,KAAK,EAACI,KAAK,EAACC,KAAK,CAAC,CAAC;IAC9BS,SAAS,GAAGT,KAAK;EACrB,CAAC;EACD,IAAIsB,WAAW,GAAGA,CAAA,KAAI;IAClBV,KAAK,CAAC,uCAAuC,EAAC;MAAEM,MAAM,EAAC,MAAM;MAAEC,IAAI,EAAE,UAASZ,QAAS;IAAgB,CAAC,CAAC;IACzG,IAAIE,SAAS,GAAG;MAAEb,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,YAAY;MAAEC,KAAK,EAAC;IAAK,CAAC;IAC1DQ,KAAK,CAACR,KAAK,GAAG,EAAE;IAChBO,KAAK,CAACP,KAAK,GAAG,EAAE;IAChBW,SAAS,CAACX,KAAK,GAAG,MAAM;IACxBN,SAAS,CAAC,CAACG,KAAK,EAACI,KAAK,EAACC,KAAK,EAACS,SAAS,CAAC,CAAC;IACxCf,SAAS,CAAC,CAACO,KAAK,EAACI,KAAK,EAACC,KAAK,EAAC;MAACJ,IAAI,EAACO,SAAS,CAACb,EAAE;MAAEO,EAAE,EAAC,CAAC;MAAEL,KAAK,EAAC,KAAK;MAACM,MAAM,EAAC;IAAI,CAAC,CAAC,CAAC;EACrF,CAAC;EAGD,oBAAOjB,OAAA;IAAKoC,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBACnCrC,OAAA;MAAQsC,OAAO,EAAEpC,WAAY;MAACO,EAAE,EAAC,MAAM;MAAA4B,QAAA,EAAC;IAAI;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrD1C,OAAA;MAAKS,EAAE,EAAC,gBAAgB;MAAA4B,QAAA,gBACpBrC,OAAA;QAAAqC,QAAA,EAAG;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACrB1C,OAAA;QAAGS,EAAE,EAAC,UAAU;QAAA4B,QAAA,EAAEjB;MAAQ;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACN1C,OAAA;MAAKS,EAAE,EAAC,aAAa;MAAA4B,QAAA,gBACjBrC,OAAA;QAAQoC,SAAS,EAAC,aAAa;QAACE,OAAO,EAAEf,UAAW;QAAAc,QAAA,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjE1C,OAAA;QAAQoC,SAAS,EAAC,aAAa;QAACE,OAAO,EAAEL,WAAY;QAAAI,QAAA,EAAC;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnE1C,OAAA;QAAQoC,SAAS,EAAC,aAAa;QAACE,OAAO,EAAEJ,aAAc;QAAAG,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvE1C,OAAA;QAAQoC,SAAS,EAAC,aAAa;QAACE,OAAO,EAAEH,WAAY;QAAAE,QAAA,EAAC;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CAAC,eACN1C,OAAA,CAACF,IAAI;MAACQ,KAAK,EAAEA,KAAM;MAACF,KAAK,EAAEA;IAAM;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAExC,CAAC;AACV;AAACvC,EAAA,CA5EQF,UAAU;AAAA0C,EAAA,GAAV1C,UAAU;AA8EnB,eAAeA,UAAU;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}