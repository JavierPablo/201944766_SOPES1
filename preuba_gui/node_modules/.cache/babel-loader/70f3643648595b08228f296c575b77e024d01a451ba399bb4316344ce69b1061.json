{"ast":null,"code":"var _jsxFileName = \"/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/ProcessSim/ProcessSim.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport \"./processsim_style.css\";\nimport { Network } from \"vis-network\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProcessSim({\n  back_button\n}) {\n  _s();\n  const nodes2 = [{\n    id: 1,\n    label: \"Node 1\"\n  }, {\n    id: 2,\n    label: \"Node 2\"\n  }, {\n    id: 3,\n    label: \"Node 3\"\n  }, {\n    id: 4,\n    label: \"Node 4\"\n  }, {\n    id: 5,\n    label: \"Node 5\"\n  }];\n  const edges2 = [{\n    from: 1,\n    to: 3\n  }, {\n    from: 1,\n    to: 2\n  }, {\n    from: 2,\n    to: 4\n  }, {\n    from: 2,\n    to: 5\n  }, {\n    from: 3,\n    to: 3\n  }];\n  let node1 = {\n    id: 1,\n    label: \"New\"\n  };\n  let node2 = {\n    id: 1,\n    label: \"Ready\"\n  };\n  let node3 = {\n    id: 1,\n    label: \"Runing\"\n  };\n  let edge1 = {\n    from: 1,\n    to: 2,\n    arrows: \"to\"\n  };\n  let edge2 = {\n    from: 2,\n    to: 3,\n    arrows: \"to\"\n  };\n  let edge3 = {\n    from: 3,\n    to: 2,\n    arrows: \"to\"\n  };\n  // let edge4 = { from: 3, to: 3 }\n  let [nodes, set_nodes] = useState([]);\n  let [edges, set_edges] = useState([]);\n  let [trgt_pid, set_trgt_pid] = useState(0);\n  let [last_node, set_last_node] = useState(1);\n  let new_action = () => {\n    let algo = fetch(\"http://localhost:1200/new_process\");\n    algo.then(res => {\n      res.json().then(obj => {\n        set_trgt_pid(obj.Pid);\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":1}`\n        });\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":2}`\n        });\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":3}`\n        });\n        set_nodes([{\n          id: 1,\n          label: \"New\"\n        }, {\n          id: 2,\n          label: \"Ready\"\n        }, {\n          id: 3,\n          label: \"Running\"\n        }]);\n        set_edges([{\n          from: 1,\n          to: 2\n        }, {\n          from: 2,\n          to: 3\n        }]);\n        set_last_node(3);\n      });\n    });\n  };\n  let stop_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":2}`\n    });\n    // 3->2\n    set_last_node(2);\n  };\n  let resume_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":3}`\n    });\n    // 2->3\n    set_last_node(3);\n  };\n  let kill_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":4}`\n    });\n    set_nodes([...nodes, {\n      id: 4,\n      label: \"Terminated\"\n    }]);\n    set_edges([...edges, {\n      from: last_node,\n      to: 4,\n      color: 'red',\n      arrows: \"to\"\n    }]);\n  };\n  const visJsRef = useRef(null);\n  const options = {};\n  const network = visJsRef.current && new Network(visJsRef.current, {\n    nodes,\n    edges\n  }, options);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"processsim-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: back_button,\n      id: \"back\",\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"process-pid-on\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Proceess pid: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"trgt-pid\",\n        children: trgt_pid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"buttons-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: new_action,\n        children: \"New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: stop_action,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: resume_action,\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: kill_action,\n        children: \"Kill\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: visJsRef,\n      style: {\n        height: '80%',\n        width: '100%',\n        backgroundColor: 'black',\n        display: 'flex',\n        flexGrow: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 12\n  }, this);\n}\n_s(ProcessSim, \"hiwx2xJ6Bj0Gv7GTUCAPN2B873w=\");\n_c = ProcessSim;\nexport default ProcessSim;\nvar _c;\n$RefreshReg$(_c, \"ProcessSim\");","map":{"version":3,"names":["React","useRef","useState","Network","jsxDEV","_jsxDEV","ProcessSim","back_button","_s","nodes2","id","label","edges2","from","to","node1","node2","node3","edge1","arrows","edge2","edge3","nodes","set_nodes","edges","set_edges","trgt_pid","set_trgt_pid","last_node","set_last_node","new_action","algo","fetch","then","res","json","obj","Pid","method","body","stop_action","resume_action","kill_action","color","visJsRef","options","network","current","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","height","width","backgroundColor","display","flexGrow","_c","$RefreshReg$"],"sources":["/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/ProcessSim/ProcessSim.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport \"./processsim_style.css\"\nimport Tree from './Tree';\nimport { Network } from \"vis-network\";\n\ninterface Params{\n    back_button:()=>void\n}\n\nfunction ProcessSim({back_button}:Params){\n   \n    const nodes2 = [\n        { id: 1, label: \"Node 1\" },\n        { id: 2, label: \"Node 2\" },\n        { id: 3, label: \"Node 3\" },\n        { id: 4, label: \"Node 4\" },\n        { id: 5, label: \"Node 5\" },\n    ];\n\n    const edges2 = [\n        { from: 1, to: 3 },\n        { from: 1, to: 2 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 },\n        { from: 3, to: 3 },\n    ];\n\n    let node1 = { id: 1, label: \"New\" }\n    let node2 = { id: 1, label: \"Ready\" }\n    let node3 = { id: 1, label: \"Runing\" }\n    let edge1 = { from: 1, to: 2 ,arrows:\"to\"}\n    let edge2 = { from: 2, to: 3 ,arrows:\"to\"}\n    let edge3 = { from: 3, to: 2 ,arrows:\"to\"}\n    // let edge4 = { from: 3, to: 3 }\n    let [nodes,set_nodes] = useState([] as { id: number; label: string; }[])\n    let [edges,set_edges] = useState([] as any[])\n    let [trgt_pid,set_trgt_pid] = useState(0)\n    let [last_node,set_last_node] = useState(1)\n    let new_action = ()=>{\n        let algo = fetch(\"http://localhost:1200/new_process\")\n        algo.then((res)=>{\n            res.json().then((obj)=>{\n                set_trgt_pid(obj.Pid)\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":1}`})\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":2}`})\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":3}`})\n                set_nodes([\n                    { id: 1, label: \"New\" },\n                    { id: 2, label: \"Ready\" },\n                    { id: 3, label: \"Running\" }\n                ])\n                set_edges([\n                    { from: 1, to: 2 },\n                    { from: 2, to: 3 },\n                ])\n                set_last_node(3)\n            })\n        })\n    }\n    let stop_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":2}`})\n        // 3->2\n        set_last_node(2)\n    }\n    let resume_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":3}`})\n        // 2->3\n        set_last_node(3)\n    }\n    let kill_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":4}`})\n        set_nodes([\n            ...nodes,\n            { id: 4, label: \"Terminated\"}\n        ])\n        set_edges([\n            ...edges,\n            { from: last_node, to: 4 ,color:'red', arrows:\"to\"},\n        ])\n    }\n    const visJsRef = useRef<HTMLDivElement>(null);\n    const options = {};\n    const network = visJsRef.current \n    && new Network(visJsRef.current, { nodes, edges }, options);\n\n    return <div className='processsim-page'>\n        <button onClick={back_button} id='back'>Back</button>\n        <div id='process-pid-on'>\n            <p>Proceess pid: </p>\n            <p id='trgt-pid'>{trgt_pid}</p>\n        </div>\n        <div id='buttons-box'>\n            <button className='sim-buttons' onClick={new_action}>New</button>\n            <button className='sim-buttons' onClick={stop_action}>Stop</button>\n            <button className='sim-buttons' onClick={resume_action}>Resume</button>\n            <button className='sim-buttons' onClick={kill_action}>Kill</button>\n        </div>\n        {/* <Tree edges={edges} nodes={nodes}></Tree> */}\n        <div ref={visJsRef} style={{\n        height: '80%',\n        width: '100%',\n        backgroundColor:'black',\n        display:'flex',\n        flexGrow:1,\n    }} />\n    </div>\n}\n\nexport default ProcessSim;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}