{"ast":null,"code":"var _jsxFileName = \"/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/ProcessSim/ProcessSim.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./processsim_style.css\";\nimport Tree from './Tree';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProcessSim({\n  back_button\n}) {\n  _s();\n  const nodes2 = [{\n    id: 1,\n    label: \"Node 1\"\n  }, {\n    id: 2,\n    label: \"Node 2\"\n  }, {\n    id: 3,\n    label: \"Node 3\"\n  }, {\n    id: 4,\n    label: \"Node 4\"\n  }, {\n    id: 5,\n    label: \"Node 5\"\n  }];\n  const edges2 = [{\n    from: 1,\n    to: 3\n  }, {\n    from: 1,\n    to: 2\n  }, {\n    from: 2,\n    to: 4\n  }, {\n    from: 2,\n    to: 5\n  }, {\n    from: 3,\n    to: 3\n  }];\n  let [nodes, set_nodes] = useState([]);\n  let [edges, set_edges] = useState([]);\n  let [trgt_pid, set_trgt_pid] = useState(0);\n  let [last_node, set_last_node] = useState(1);\n  let new_action = () => {\n    let algo = fetch(\"http://localhost:1200/new_process\");\n    algo.then(res => {\n      res.json().then(obj => {\n        set_trgt_pid(obj.Pid);\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":1}`\n        });\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":2}`\n        });\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":3}`\n        });\n        set_nodes([{\n          id: 1,\n          label: \"New\"\n        }, {\n          id: 2,\n          label: \"Ready\"\n        }, {\n          id: 3,\n          label: \"Running\"\n        }]);\n        set_edges([{\n          from: 1,\n          to: 2\n        }, {\n          from: 2,\n          to: 3\n        }]);\n        set_last_node(3);\n      });\n    });\n  };\n  let stop_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":2}`\n    });\n    // 3->2\n    set_last_node(2);\n  };\n  let resume_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":3}`\n    });\n    // 2->3\n    set_last_node(3);\n  };\n  let kill_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":4}`\n    });\n    set_nodes([...nodes, {\n      id: 4,\n      label: \"Terminated\"\n    }]);\n    set_edges([...edges, {\n      from: last_node,\n      to: 4,\n      color: 'red',\n      arrows: \"to\"\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"processsim-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: back_button,\n      id: \"back\",\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"process-pid-on\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Proceess pid: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"trgt-pid\",\n        children: trgt_pid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"buttons-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: new_action,\n        children: \"New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: stop_action,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: resume_action,\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: kill_action,\n        children: \"Kill\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Tree, {\n      edges: edges,\n      nodes: nodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 12\n  }, this);\n}\n_s(ProcessSim, \"Mtf0IruWnuY6ZWvLAEduwUeefLg=\");\n_c = ProcessSim;\nexport default ProcessSim;\nvar _c;\n$RefreshReg$(_c, \"ProcessSim\");","map":{"version":3,"names":["React","useState","Tree","jsxDEV","_jsxDEV","ProcessSim","back_button","_s","nodes2","id","label","edges2","from","to","nodes","set_nodes","edges","set_edges","trgt_pid","set_trgt_pid","last_node","set_last_node","new_action","algo","fetch","then","res","json","obj","Pid","method","body","stop_action","resume_action","kill_action","color","arrows","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/ProcessSim/ProcessSim.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport \"./processsim_style.css\"\nimport Tree from './Tree';\n\ninterface Params{\n    back_button:()=>void\n}\n\nfunction ProcessSim({back_button}:Params){\n   \n    const nodes2 = [\n        { id: 1, label: \"Node 1\" },\n        { id: 2, label: \"Node 2\" },\n        { id: 3, label: \"Node 3\" },\n        { id: 4, label: \"Node 4\" },\n        { id: 5, label: \"Node 5\" },\n    ];\n\n    const edges2 = [\n        { from: 1, to: 3 },\n        { from: 1, to: 2 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 },\n        { from: 3, to: 3 },\n    ];\n    let [nodes,set_nodes] = useState([] as { id: number; label: string; }[])\n    let [edges,set_edges] = useState([] as any[])\n    let [trgt_pid,set_trgt_pid] = useState(0)\n    let [last_node,set_last_node] = useState(1)\n    let new_action = ()=>{\n        let algo = fetch(\"http://localhost:1200/new_process\")\n        algo.then((res)=>{\n            res.json().then((obj)=>{\n                set_trgt_pid(obj.Pid)\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":1}`})\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":2}`})\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":3}`})\n                set_nodes([\n                    { id: 1, label: \"New\" },\n                    { id: 2, label: \"Ready\" },\n                    { id: 3, label: \"Running\" }\n                ])\n                set_edges([\n                    { from: 1, to: 2 },\n                    { from: 2, to: 3 },\n                ])\n                set_last_node(3)\n            })\n        })\n    }\n    let stop_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":2}`})\n        // 3->2\n        set_last_node(2)\n    }\n    let resume_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":3}`})\n        // 2->3\n        set_last_node(3)\n    }\n    let kill_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":4}`})\n        set_nodes([\n            ...nodes,\n            { id: 4, label: \"Terminated\"}\n        ])\n        set_edges([\n            ...edges,\n            { from: last_node, to: 4 ,color:'red', arrows:\"to\"},\n        ])\n    }\n\n    return <div className='processsim-page'>\n        <button onClick={back_button} id='back'>Back</button>\n        <div id='process-pid-on'>\n            <p>Proceess pid: </p>\n            <p id='trgt-pid'>{trgt_pid}</p>\n        </div>\n        <div id='buttons-box'>\n            <button className='sim-buttons' onClick={new_action}>New</button>\n            <button className='sim-buttons' onClick={stop_action}>Stop</button>\n            <button className='sim-buttons' onClick={resume_action}>Resume</button>\n            <button className='sim-buttons' onClick={kill_action}>Kill</button>\n        </div>\n        <Tree edges={edges} nodes={nodes}></Tree>\n    </div>\n}\n\nexport default ProcessSim;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}