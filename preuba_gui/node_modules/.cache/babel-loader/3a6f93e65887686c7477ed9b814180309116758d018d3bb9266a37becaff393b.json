{"ast":null,"code":"var _jsxFileName = \"/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/ProcessSim/ProcessSim.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport \"./processsim_style.css\";\nimport { Network } from \"vis-network\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProcessSim({\n  back_button\n}) {\n  _s();\n  let node1 = {\n    id: 1,\n    label: \"New\"\n  };\n  let node2 = {\n    id: 2,\n    label: \"Ready\"\n  };\n  let node3 = {\n    id: 3,\n    label: \"Runing\",\n    color: \"\"\n  };\n  let edge1 = {\n    from: 1,\n    to: 2,\n    arrows: \"to\"\n  };\n  let edge2 = {\n    from: 2,\n    to: 3,\n    arrows: \"to\",\n    color: \"\"\n  };\n  let edge3 = {\n    from: 3,\n    to: 2,\n    arrows: \"to\"\n  };\n  let nodes = [];\n  let edges = [];\n  let [trgt_pid, set_trgt_pid] = useState(0);\n  let last_node = 0;\n  const visJsRef = useRef(null);\n  const options = {};\n  let network = visJsRef.current && new Network(visJsRef.current, {\n    nodes,\n    edges\n  }, options);\n  let new_action = () => {\n    let algo = fetch(\"http://localhost:1200/new_process\");\n    algo.then(res => {\n      res.json().then(obj => {\n        set_trgt_pid(obj.Pid);\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":1}`\n        });\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":2}`\n        });\n        fetch(\"http://localhost:1200/save_op_process\", {\n          method: 'POST',\n          body: `{\"pid\":${obj.Pid},\"operation\":3}`\n        });\n        nodes.push(node1);\n        nodes.push(node2);\n        node3.color = \"red\";\n        nodes.push(node3);\n        edges.push(edge1);\n        edge2.color = 'red';\n        edges.push(edge2);\n        last_node = 3;\n        network = visJsRef.current && new Network(visJsRef.current, {\n          nodes,\n          edges\n        }, options);\n      });\n    });\n  };\n  let stop_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":2}`\n    });\n    // 3->2\n    last_node = 2;\n  };\n  let resume_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":3}`\n    });\n    // 2->3\n    last_node = 3;\n  };\n  let kill_action = () => {\n    fetch(\"http://localhost:1200/save_op_process\", {\n      method: 'POST',\n      body: `{\"pid\":${trgt_pid},\"operation\":4}`\n    });\n    let last_node = {\n      id: 4,\n      label: \"Terminated\",\n      color: 'red'\n    };\n    nodes.push(last_node);\n    edges.push({\n      from: last_node,\n      to: 4,\n      color: 'red',\n      arrows: \"to\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"processsim-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: back_button,\n      id: \"back\",\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"process-pid-on\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Proceess pid: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"trgt-pid\",\n        children: trgt_pid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"buttons-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: new_action,\n        children: \"New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: stop_action,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: resume_action,\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sim-buttons\",\n        onClick: kill_action,\n        children: \"Kill\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: visJsRef,\n      style: {\n        height: '80%',\n        width: '100%',\n        backgroundColor: 'black',\n        display: 'flex',\n        flexGrow: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 12\n  }, this);\n}\n_s(ProcessSim, \"zuxPDEdAVsq4GloWLFGDQ1AEoqc=\");\n_c = ProcessSim;\nexport default ProcessSim;\nvar _c;\n$RefreshReg$(_c, \"ProcessSim\");","map":{"version":3,"names":["React","useRef","useState","Network","jsxDEV","_jsxDEV","ProcessSim","back_button","_s","node1","id","label","node2","node3","color","edge1","from","to","arrows","edge2","edge3","nodes","edges","trgt_pid","set_trgt_pid","last_node","visJsRef","options","network","current","new_action","algo","fetch","then","res","json","obj","Pid","method","body","push","stop_action","resume_action","kill_action","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","height","width","backgroundColor","display","flexGrow","_c","$RefreshReg$"],"sources":["/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/ProcessSim/ProcessSim.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport \"./processsim_style.css\"\nimport Tree from './Tree';\nimport { Network } from \"vis-network\";\n\ninterface Params{\n    back_button:()=>void\n}\n\nfunction ProcessSim({back_button}:Params){\n    let node1 = { id: 1, label: \"New\" }\n    let node2 = { id: 2, label: \"Ready\" }\n    let node3 = { id: 3, label: \"Runing\", color:\"\"}\n    let edge1 = { from: 1, to: 2 ,arrows:\"to\"}\n    let edge2 = { from: 2, to: 3 ,arrows:\"to\", color:\"\"}\n    let edge3 = { from: 3, to: 2 ,arrows:\"to\"}\n    let nodes = [] as any[]\n    let edges = [] as any[]\n    let [trgt_pid,set_trgt_pid] = useState(0)\n    let last_node = 0\n    const visJsRef = useRef<HTMLDivElement>(null);\n    const options = {};\n                let network = visJsRef.current \n                && new Network(visJsRef.current, { nodes, edges }, options);\n    let new_action = ()=>{\n        let algo = fetch(\"http://localhost:1200/new_process\")\n        algo.then((res)=>{\n            res.json().then((obj)=>{\n                set_trgt_pid(obj.Pid)\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":1}`})\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":2}`})\n                fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${obj.Pid},\"operation\":3}`})\n                nodes.push(node1)\n                nodes.push(node2)\n                node3.color = \"red\"\n                nodes.push(node3)\n                edges.push(edge1)\n                edge2.color = 'red'\n                edges.push(edge2)\n                last_node = 3\n                network = visJsRef.current \n                && new Network(visJsRef.current, { nodes, edges }, options);\n                \n            })\n        })\n    }\n    let stop_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":2}`})\n        // 3->2\n        last_node = 2\n\n    }\n    let resume_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":3}`})\n        // 2->3\n        last_node = 3\n    }\n    let kill_action = ()=>{\n        fetch(\"http://localhost:1200/save_op_process\",{ method:'POST', body:`{\"pid\":${trgt_pid},\"operation\":4}`})\n        let last_node = { id: 4, label: \"Terminated\", color:'red'}\n        nodes.push(last_node)\n        edges.push({ from: last_node, to: 4 ,color:'red', arrows:\"to\"})\n    }\n    \n\n    return <div className='processsim-page'>\n        <button onClick={back_button} id='back'>Back</button>\n        <div id='process-pid-on'>\n            <p>Proceess pid: </p>\n            <p id='trgt-pid'>{trgt_pid}</p>\n        </div>\n        <div id='buttons-box'>\n            <button className='sim-buttons' onClick={new_action}>New</button>\n            <button className='sim-buttons' onClick={stop_action}>Stop</button>\n            <button className='sim-buttons' onClick={resume_action}>Resume</button>\n            <button className='sim-buttons' onClick={kill_action}>Kill</button>\n        </div>\n        {/* <Tree edges={edges} nodes={nodes}></Tree> */}\n        <div ref={visJsRef} style={{\n        height: '80%',\n        width: '100%',\n        backgroundColor:'black',\n        display:'flex',\n        flexGrow:1,\n    }} />\n    </div>\n}\n\nexport default ProcessSim;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}