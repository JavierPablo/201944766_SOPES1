{"ast":null,"code":"var _jsxFileName = \"/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/HistoricMonitor/HistoricMonitor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport \"./historicaltimemonitor_style.css\";\nimport LineChart from './LineChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HistoricMonitor({\n  back_button\n}) {\n  _s();\n  let [data, set_data] = useState([30, 70, 24, 64]);\n  useEffect(() => {\n    // Use setTimeout to update the message after 2000 milliseconds (2 seconds)\n    const timeoutId = setTimeout(() => {\n      let algo = fetch(\"http://localhost:1200/realtime\");\n      algo.then(res => {\n        res.json().then(obj => {\n          set_data();\n        });\n      });\n    }, 2000);\n\n    // Cleanup function to clear the timeout if the component unmounts\n    return () => clearTimeout(timeoutId);\n  }, [ram_data, cpu_data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"realtimemonitor-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: back_button,\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-realtimemonitor\",\n      children: [/*#__PURE__*/_jsxDEV(LineChart, {\n        data_set: data,\n        title: \"CPU Usage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n        data_set: data,\n        title: \"RAM Usage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 12\n  }, this);\n}\n_s(HistoricMonitor, \"1XsOXXFA9+wBG8SNcYbBaAjhK14=\");\n_c = HistoricMonitor;\nexport default HistoricMonitor;\nvar _c;\n$RefreshReg$(_c, \"HistoricMonitor\");","map":{"version":3,"names":["React","useEffect","useState","LineChart","jsxDEV","_jsxDEV","HistoricMonitor","back_button","_s","data","set_data","timeoutId","setTimeout","algo","fetch","then","res","json","obj","clearTimeout","ram_data","cpu_data","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","data_set","title","_c","$RefreshReg$"],"sources":["/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/HistoricMonitor/HistoricMonitor.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport \"./historicaltimemonitor_style.css\"\nimport LineChart from './LineChart';\n\n\n\n\ninterface Params{\n    back_button:()=>void\n}\n\nfunction HistoricMonitor({back_button}:Params){\n    \n    let [data,set_data] = useState([30,70,24,64])\n\n    useEffect(() => {\n        // Use setTimeout to update the message after 2000 milliseconds (2 seconds)\n        const timeoutId = setTimeout(() => {\n            let algo = fetch(\"http://localhost:1200/realtime\")\n            algo.then((res)=>{\n                res.json().then((obj)=>{\n                    set_data()  \n                })\n            })\n        }, 2000);\n    \n        // Cleanup function to clear the timeout if the component unmounts\n        return () => clearTimeout(timeoutId);\n      }, [ram_data,cpu_data]);\n\n    return <div className='realtimemonitor-page'>\n        <button onClick={back_button}>Back</button>\n        <div className='container-realtimemonitor'>\n            <LineChart data_set={data} title={\"CPU Usage\"}></LineChart>\n            <LineChart data_set={data} title={\"RAM Usage\"}></LineChart>\n        </div>\n    </div>\n}\n\nexport default HistoricMonitor;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,mCAAmC;AAC1C,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASpC,SAASC,eAAeA,CAAC;EAACC;AAAkB,CAAC,EAAC;EAAAC,EAAA;EAE1C,IAAI,CAACC,IAAI,EAACC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMU,SAAS,GAAGC,UAAU,CAAC,MAAM;MAC/B,IAAIC,IAAI,GAAGC,KAAK,CAAC,gCAAgC,CAAC;MAClDD,IAAI,CAACE,IAAI,CAAEC,GAAG,IAAG;QACbA,GAAG,CAACC,IAAI,CAAC,CAAC,CAACF,IAAI,CAAEG,GAAG,IAAG;UACnBR,QAAQ,CAAC,CAAC;QACd,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMS,YAAY,CAACR,SAAS,CAAC;EACtC,CAAC,EAAE,CAACS,QAAQ,EAACC,QAAQ,CAAC,CAAC;EAEzB,oBAAOhB,OAAA;IAAKiB,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACxClB,OAAA;MAAQmB,OAAO,EAAEjB,WAAY;MAAAgB,QAAA,EAAC;IAAI;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3CvB,OAAA;MAAKiB,SAAS,EAAC,2BAA2B;MAAAC,QAAA,gBACtClB,OAAA,CAACF,SAAS;QAAC0B,QAAQ,EAAEpB,IAAK;QAACqB,KAAK,EAAE;MAAY;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAC3DvB,OAAA,CAACF,SAAS;QAAC0B,QAAQ,EAAEpB,IAAK;QAACqB,KAAK,EAAE;MAAY;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AACV;AAACpB,EAAA,CA1BQF,eAAe;AAAAyB,EAAA,GAAfzB,eAAe;AA4BxB,eAAeA,eAAe;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}