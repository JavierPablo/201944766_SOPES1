{"ast":null,"code":"var _jsxFileName = \"/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/ProcessTree/ProcessTree.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport \"./processtree_style.css\";\nimport Tree from './Tree';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProcessTree({\n  back_button\n}) {\n  _s();\n  let [nodes, set_nodes] = useState([]);\n  let [edges, set_edges] = useState([]);\n  let [elm_list, set_elm_list] = useState([/*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]);\n  useEffect(() => {\n    let algo = fetch(\"http://localhost:1200/all_pids\");\n    algo.then(res => {\n      res.json().then(obj => {\n        let options = [];\n        for (let i = 0; i < obj.length; i++) {\n          options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n            value: obj[i].Pid,\n            onSelect: on_click,\n            children: obj[i].Pid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 34\n          }, this));\n        }\n        set_elm_list(options);\n      });\n    });\n  }, []);\n  let on_click = () => {\n    console.log(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n    // let algo = fetch(\"http://localhost:1200/process_info\",{body:obj[i].Pid})\n    let asdl = this.value;\n    let algo = fetch(\"http://localhost:1200/process_info\", {\n      body: \"\"\n    });\n    algo.then(res => {\n      res.json().then(obj => {\n        let counter = 1;\n        const nodes = [{\n          id: counter,\n          label: `pid:${obj.Pid}\\n${obj.Name}`\n        }];\n        // const edges = [{ from: 1, to: 3 },];\n        const edges = [];\n        let recursive_to_child = (parent, child) => {\n          nodes.push({\n            id: counter++,\n            label: `pid:${child.Pid}\\n${child.Name}`\n          });\n          edges.push({\n            from: parent,\n            to: counter\n          });\n          for (let i = 0; i < child.Childs.length; i++) {\n            recursive_to_child(counter, child.Childs[i]);\n          }\n        };\n        for (let i = 0; i < obj.Childs.length; i++) {\n          recursive_to_child(counter, obj.Childs[i]);\n        }\n        set_nodes(nodes);\n        set_edges(edges);\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"processtree-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: back_button,\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"process-pid-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Proceess pid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"select-pid\",\n        children: [\" \", elm_list]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tree, {\n      edges: edges,\n      nodes: nodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 12\n  }, this);\n}\n_s(ProcessTree, \"Tka3u+KFhPtcxlf9uIHpRlb6kBg=\");\n_c = ProcessTree;\nexport default ProcessTree;\nvar _c;\n$RefreshReg$(_c, \"ProcessTree\");","map":{"version":3,"names":["React","useEffect","useState","Tree","Fragment","_Fragment","jsxDEV","_jsxDEV","ProcessTree","back_button","_s","nodes","set_nodes","edges","set_edges","elm_list","set_elm_list","algo","fetch","then","res","json","obj","options","i","length","push","value","Pid","onSelect","on_click","children","fileName","_jsxFileName","lineNumber","columnNumber","console","log","asdl","body","counter","id","label","Name","recursive_to_child","parent","child","from","to","Childs","className","onClick","name","_c","$RefreshReg$"],"sources":["/home/javier/Compartidos/VScode_projects/react/preuba_gui/src/components/ProcessTree/ProcessTree.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport \"./processtree_style.css\"\nimport Tree from './Tree';\ninterface Params{\n    back_button:()=>void\n}\n\n\nfunction ProcessTree({back_button}:Params){\n    let [nodes,set_nodes] = useState([] as { id: number; label: string; }[])\n    let [edges,set_edges] = useState([] as { from: number; to: number; }[])\n    let [elm_list,set_elm_list] = useState([<></>])\n    useEffect(() => {\n        let algo = fetch(\"http://localhost:1200/all_pids\")\n        algo.then((res)=>{\n            res.json().then((obj)=>{\n                let options = [] \n                for (let i=0;i<obj.length;i++) {\n                    \n                    options.push(<option value={obj[i].Pid} onSelect={on_click}>{obj[i].Pid}</option>)\n                }\n                set_elm_list(options)\n            })\n        })\n      }, []);\n      \n\n      let on_click = ()=>{\n        console.log(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n        // let algo = fetch(\"http://localhost:1200/process_info\",{body:obj[i].Pid})\n        let asdl = (this).value as String\n        let algo = fetch(\"http://localhost:1200/process_info\",{body:\"\"})\n        algo.then((res)=>{\n            res.json().then((obj)=>{\n                let counter = 1\n                const nodes = [{ id: counter, label: `pid:${obj.Pid}\\n${obj.Name}` }];\n                // const edges = [{ from: 1, to: 3 },];\n                const edges = [] as { from: number; to: number; }[];\n                let recursive_to_child = (parent:number,child:any)=>{\n                    nodes.push({ id: counter++, label: `pid:${child.Pid}\\n${child.Name}` })\n                    edges.push({ from: parent, to: counter})\n                    for (let i=0;i<child.Childs.length;i++) {\n                        recursive_to_child(counter,child.Childs[i])\n                    }\n                }\n                for (let i=0;i<obj.Childs.length;i++) {\n                    recursive_to_child(counter,obj.Childs[i])\n                }\n                set_nodes(nodes)\n                set_edges(edges)\n            })\n        })\n      }\n\n    return <div className='processtree-page'>\n        <button onClick={back_button}>Back</button>\n            <div className='process-pid-select'>\n                <p>Proceess pid</p>\n                <select name=\"select-pid\"> {elm_list}</select>\n            </div>\n            <Tree edges={edges} nodes={nodes}></Tree>\n    </div>\n}\n\nexport default ProcessTree;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,yBAAyB;AAChC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAM1B,SAASC,WAAWA,CAAC;EAACC;AAAkB,CAAC,EAAC;EAAAC,EAAA;EACtC,IAAI,CAACC,KAAK,EAACC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAsC,CAAC;EACxE,IAAI,CAACW,KAAK,EAACC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAqC,CAAC;EACvE,IAAI,CAACa,QAAQ,EAACC,YAAY,CAAC,GAAGd,QAAQ,CAAC,cAACK,OAAA,CAAAF,SAAA,mBAAI,CAAC,CAAC,CAAC;EAC/CJ,SAAS,CAAC,MAAM;IACZ,IAAIgB,IAAI,GAAGC,KAAK,CAAC,gCAAgC,CAAC;IAClDD,IAAI,CAACE,IAAI,CAAEC,GAAG,IAAG;MACbA,GAAG,CAACC,IAAI,CAAC,CAAC,CAACF,IAAI,CAAEG,GAAG,IAAG;QACnB,IAAIC,OAAO,GAAG,EAAE;QAChB,KAAK,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,GAAG,CAACG,MAAM,EAACD,CAAC,EAAE,EAAE;UAE3BD,OAAO,CAACG,IAAI,eAACnB,OAAA;YAAQoB,KAAK,EAAEL,GAAG,CAACE,CAAC,CAAC,CAACI,GAAI;YAACC,QAAQ,EAAEC,QAAS;YAAAC,QAAA,EAAET,GAAG,CAACE,CAAC,CAAC,CAACI;UAAG;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,CAAC;QACtF;QACAnB,YAAY,CAACO,OAAO,CAAC;MACzB,CAAC,CAAC;IACN,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAGN,IAAIO,QAAQ,GAAGA,CAAA,KAAI;IACjBM,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvD;IACA,IAAIC,IAAI,GAAI,IAAI,CAAEX,KAAe;IACjC,IAAIV,IAAI,GAAGC,KAAK,CAAC,oCAAoC,EAAC;MAACqB,IAAI,EAAC;IAAE,CAAC,CAAC;IAChEtB,IAAI,CAACE,IAAI,CAAEC,GAAG,IAAG;MACbA,GAAG,CAACC,IAAI,CAAC,CAAC,CAACF,IAAI,CAAEG,GAAG,IAAG;QACnB,IAAIkB,OAAO,GAAG,CAAC;QACf,MAAM7B,KAAK,GAAG,CAAC;UAAE8B,EAAE,EAAED,OAAO;UAAEE,KAAK,EAAG,OAAMpB,GAAG,CAACM,GAAI,KAAIN,GAAG,CAACqB,IAAK;QAAE,CAAC,CAAC;QACrE;QACA,MAAM9B,KAAK,GAAG,EAAqC;QACnD,IAAI+B,kBAAkB,GAAGA,CAACC,MAAa,EAACC,KAAS,KAAG;UAChDnC,KAAK,CAACe,IAAI,CAAC;YAAEe,EAAE,EAAED,OAAO,EAAE;YAAEE,KAAK,EAAG,OAAMI,KAAK,CAAClB,GAAI,KAAIkB,KAAK,CAACH,IAAK;UAAE,CAAC,CAAC;UACvE9B,KAAK,CAACa,IAAI,CAAC;YAAEqB,IAAI,EAAEF,MAAM;YAAEG,EAAE,EAAER;UAAO,CAAC,CAAC;UACxC,KAAK,IAAIhB,CAAC,GAAC,CAAC,EAACA,CAAC,GAACsB,KAAK,CAACG,MAAM,CAACxB,MAAM,EAACD,CAAC,EAAE,EAAE;YACpCoB,kBAAkB,CAACJ,OAAO,EAACM,KAAK,CAACG,MAAM,CAACzB,CAAC,CAAC,CAAC;UAC/C;QACJ,CAAC;QACD,KAAK,IAAIA,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,GAAG,CAAC2B,MAAM,CAACxB,MAAM,EAACD,CAAC,EAAE,EAAE;UAClCoB,kBAAkB,CAACJ,OAAO,EAAClB,GAAG,CAAC2B,MAAM,CAACzB,CAAC,CAAC,CAAC;QAC7C;QACAZ,SAAS,CAACD,KAAK,CAAC;QAChBG,SAAS,CAACD,KAAK,CAAC;MACpB,CAAC,CAAC;IACN,CAAC,CAAC;EACJ,CAAC;EAEH,oBAAON,OAAA;IAAK2C,SAAS,EAAC,kBAAkB;IAAAnB,QAAA,gBACpCxB,OAAA;MAAQ4C,OAAO,EAAE1C,WAAY;MAAAsB,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvC5B,OAAA;MAAK2C,SAAS,EAAC,oBAAoB;MAAAnB,QAAA,gBAC/BxB,OAAA;QAAAwB,QAAA,EAAG;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACnB5B,OAAA;QAAQ6C,IAAI,EAAC,YAAY;QAAArB,QAAA,GAAC,GAAC,EAAChB,QAAQ;MAAA;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACN5B,OAAA,CAACJ,IAAI;MAACU,KAAK,EAAEA,KAAM;MAACF,KAAK,EAAEA;IAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AACV;AAACzB,EAAA,CAtDQF,WAAW;AAAA6C,EAAA,GAAX7C,WAAW;AAwDpB,eAAeA,WAAW;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}